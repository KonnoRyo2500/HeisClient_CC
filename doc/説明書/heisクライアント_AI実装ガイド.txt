!! Hon bunsho ga mojibake suru baai wa, TEXT-EDITOR no moji ENCODING o UTF-8(BOM) ni henko shite kudasai. !!

heis総合クライアントCompreheisive Client AI実装ガイド

1. 概要
	本文書は，heis AI作成支援クライアントソフトCompreheisive Client(以下，"CC")を用いて
	heis対戦用AIを実装するためのガイドです．

2. 実装対象クラス
	以下に示すクラスをユーザが実装することにより，AIの思考ルーチンを作成できます．
	その際，新しく関数やクラス，ライブラリを追加してもOKです．
	なお，サンプルプログラムとして，完全ランダムで移動 or 攻撃を行う思考ルーチンを実装しています．
		・CUserAI
		・COpponentAI(ローカルモードを利用する場合)

3. 使用できる関数
	(1) メイン処理
		1ターン内の行動は，すべて"AI_main"関数に記述します．
		C言語プログラムのメイン関数と同様です．
		引数の"field_pkt"の各メンバには，以下に示す情報が入っています．

		[field_pktのメンバ]
			uint16_t width:						フィールドの横幅．
			uint16_t height:					フィールドの縦幅．
			std::string turn_team:				行動中のチーム名(※1)．
			std::vector<std::string> players:	ゲームに参加しているすべてのチーム名．
			bool finished:						対戦が終了したか．trueならばすでに対戦は終了している(※2)．
			uint32_t count:						ゲーム中で各チームが行動を行った合計回数．
			std::vector<UnitsArrayElem> units:	フィールドにいる全兵士の情報(※3)．
			※1: CUserAIの"AI_main"関数では自チーム名が，COpponentAIの"AI_main"関数では敵チーム名が入ります．
			※2: "AI_main"関数内では，常にfalseになります．
			※3: このメンバに入っている情報は，以下に示す各関数により取得できます．したがって，特別な事情がなければ，
				 このメンバを直接参照する必要はありません．

	以下に示すすべてのメソッドは，メンバ変数"m_commander"(CCommanderクラス)から呼び出してください．
	m_commanderはポインタで保持しているため，呼び出しはアロー演算子(->)により行います．
	(2) 兵士の検索
		以下のメソッドを呼び出すことで，指定したチーム名と条件に該当する兵士のIDをすべて取得できます．
		IDはSTLのstd::string型で表現されます．
			・std::vector<std::string> get_all_movable_infantry_ids(std::string チーム名): 移動可能な兵士の全IDを取得
			・std::vector<std::string> get_all_attackable_infantry_ids(std::string チーム名): 攻撃可能な兵士の全IDを取得
			・std::vector<std::string> get_all_actable_infantry_ids(std::string チーム名): 移動 or 攻撃可能な兵士の全IDを取得

	(3) 兵士の移動・攻撃
		以下のメソッドを呼び出すことで，兵士に移動，攻撃を指示できます．
		敵チームの兵士には使用できません．
			・void move(std::string 兵士ID, FieldPosition 移動先座標): 兵士を移動させる
			・void attack(std::string 兵士ID, FieldPosition 攻撃先座標): 兵士を攻撃させる

	(4) 移動・攻撃可能マスの探索
		以下のメソッドを呼び出すことで，指定した兵士が移動・攻撃可能なマスの座標の集合が得られます．
			・std::vector<FieldPosition> find_movable_position(std::string 兵士ID): 兵士の移動可能マスを取得
			・std::vector<FieldPosition> find_attackable_position(std::string 兵士ID): 兵士の攻撃可能マスを取得

	(5) 兵士のステータス取得
		以下のメソッドを呼び出すことで，兵士の各種ステータスを取得できます．
			・int8_t get_hp(std::string 兵士ID): 兵士のHPを取得する
			・FieldPosition get_position(std::string 兵士ID): 兵士の現在位置の座標を取得する
			・uint8_t get_action_remain(std::string 兵士ID): 兵士の残り移動回数を取得する

4. 実装上の注意
	・マルチスレッドや外部スクリプトなどを使用して実装する場合でも，1ターン内での行動は"AI_main"関数内で完結させてください．
	・CCにすでに実装されている関数やクラスのうち，本文書に記載されている以外のものを使用することは避けてください．
	  ゲームが正常に進行できなくなる恐れがあります．
