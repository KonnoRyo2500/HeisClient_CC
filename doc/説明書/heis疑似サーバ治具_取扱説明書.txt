!! Hon bunsho ga mojibake suru baai wa, TEXT-EDITOR no moji ENCODING o UTF-8(BOM) ni henko shite kudasai. !!

heis疑似サーバ治具 取扱説明書
Author: Ryo Konno

1. 概要
	本文書は、heis総合クライアント(CC)の補助ソフトである疑似サーバ治具(以下、"PS")の取扱説明書です。

2. 動作環境
	PSは、Linux OS上で動作します。

3. 本ソフトの概要
	PSは、CCとテスト用のJSONを送受信するためのツールです。
	CCのデバッグに使用することを想定しています。

3. ビルド手順
	CMakeによりビルドできます。
	なお、ソースはすでにクローン済みであるものとします。
	ソースのクローン方法は、「heisクライアント_取扱説明書」の4章を参照してください。
	$ cd (CCのクローン先ディレクトリ)/heisclient_cc/Tool/HeisPseudoServer/
	$ cmake .
	$ make

4. 起動手順
	コマンドラインから、引数なしで実行できます。
	起動後、CCをオンラインモードで2つ立ち上げ、設定ファイル(6章参照)に記載したIPアドレスとポート番号にCCがそれぞれ接続すると
	PSの処理が実行されます。
	なお、PSへの接続は先攻プレイヤーから順に行ってください。
	$ cd bin
	$ ./HeisPseudoServer.exe

5. JSONの送受信制御
	PSによるJSONの送受信は、以下のコマンドで制御します。
		i) 受信(画面):				"recv print"
			-> JSONをCCから受信し、コンソールに表示します。
		ii) 受信(ファイル):			"recv write (ファイル名)"
			-> JSONをCCから受信し、指定したファイルに書き出します。
		iii) 送信(指定テキスト):	"send msg (JSON)"
			-> 指定したJSONをCCに送信します。
		iv) 送信(ファイル):			"send file (ファイル名)"
			-> 指定したファイルからJSONを読み出し、CCに送信します。

	コマンドの末尾に、コマンドの対象となるプレイヤーを記述します。
	"first"が先攻、"second"が後攻を表します。
	
	これらのコマンドは、「シナリオファイル」と呼ばれるファイルに記載します。
	シナリオファイルには、1行につき1つのコマンドを記載します。
	PSが起動すると、シナリオファイルに記載されたコマンドを上から順に実行していきます。
	以下に、シナリオファイルの記述例を示します。
		例)
			recv print first
			send msg {"text": "hello,world!"} second
			send file json.txt second

			=> この場合、PSは先攻プレイヤーからJSONを1回受信してコンソールに出力し、
			   {"text": "hello,world!"}というJSONを後攻プレイヤーに送信します。
			=> 続けて、json.txtに記載されているJSONを読み出し、後攻プレイヤーに送信します。

	シナリオファイルは、以下のディレクトリに置いてください。
		heisclient_cc/setting/PseudoServer/files/

6. 設定変更
	PSの設定変更は、設定ファイル"heis_ps_setting.csv"を書き換えることで行います。
	設定ファイルはCSVファイルであるため、表計算ソフトで編集することをお勧めします。
	設定ファイルは、以下のディレクトリに置いてください。
		heisclient_cc/setting/PseudoServer/

	設定可能な項目を以下に示します。

	[PSの設定項目]
		・ps_listen_port_num: 接続を待ち受けるポート番号(2個)
		・ps_listen_ip_addr: 接続を待ち受けるIPアドレス(IPv4, 2個)
